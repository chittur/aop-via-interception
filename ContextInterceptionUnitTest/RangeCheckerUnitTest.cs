/**************************************************************************************************
 * Filename    = RangeCheckerUnitTest.cs
 *
 * Author      = Ramaswamy Krishnan-Chittur
 *
 * Product     = AspectOrientedProgramming
 * 
 * Project     = ContextInterceptionUnitTest
 *
 * Description = Unit tests for the range-checking interception library.
 *************************************************************************************************/

using ContextInterception;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UnitTesting.Logging;
using System;

namespace ContextInterceptionUnitTest
{
    /// <summary>
    /// Test class derived from ContextBoundObject to support interception.
    /// </summary>
    [RangeChecker(true)]
    class Math : ContextBoundObject
    {
        public double GetSectorArea([Range(true, Lower = 0.0)] double radius,
                                    [Range(true, Lower = 0.0, Upper = 6.28)] double angle)
        {
            // Note: Apply range check on the parameters.

            return (3.14 * radius * radius * angle);
        }

        [method: Range(true, Lower = 0.0, Upper = 1.0)]
        public double GetProbability()
        {
            // Note: Apply range check on the return value.

            // Incorrect implementation, just to test out of range exception being generated by interception.
            return -1;
        }
    }

    /// <summary>
    /// Unit test class for context-bound interception.
    /// </summary>
    [TestClass]
    public class RangeCheckerUnitTest
    {
        /// <summary>
        /// Tests interception on the parameter arguments.
        /// </summary>
        [TestMethod]
        public void TestRangeCheckOnParameters()
        {
            Math math = new Math();

            double result = math.GetSectorArea(1, 1);
            Assert.AreEqual(result, 3.14);

            result = math.GetSectorArea(0, 0);
            Assert.AreEqual(result, 0);

            try
            {
                result = math.GetSectorArea(0, -0.5);
                Assert.Fail("Math.GetSectorArea(0, -0.5) should throw an argument out of range exception.");
            }
            catch (Exception exception)
            {
                Logger.LogMessage(exception.Message);
                Assert.AreEqual(exception.GetType(), typeof(ArgumentOutOfRangeException));
            }
        }

        /// <summary>
        /// Tests interception on the return value.
        /// </summary>
        [TestMethod]
        public void TestRangeCheckOnReturnValue()
        {
            try
            {
                _ = new Math().GetProbability();
                Assert.Fail("Math.GetProbability() should throw an argument out of range exception.");
            }
            catch (Exception exception)
            {
                Logger.LogMessage(exception.Message);
                Assert.AreEqual(exception.GetType(), typeof(ArgumentOutOfRangeException));
            }
        }
    }
}
